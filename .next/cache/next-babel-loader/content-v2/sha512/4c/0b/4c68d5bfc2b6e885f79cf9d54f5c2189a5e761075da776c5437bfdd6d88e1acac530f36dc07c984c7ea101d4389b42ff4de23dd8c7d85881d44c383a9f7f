{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jennyhwang/Desktop/next/code/14-preparing-paths-getstaticpaths/pages/[meetupId]/index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient } from 'mongodb';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://jennyunh:8711Sajh$@cluster0.1xc7n.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //name the collection something (meetups in this case)\n\n  const meetupsCollection = db.collection('meetups');\n  client.close(); //find takes an object with a filter inside as first argument,\n  //empty object means no filter (you want all objects)\n  //second argument specify what info you want to extract\n  //_id:1 means only include the id, no other field values\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const client = await MongoClient.connect('mongodb+srv://jennyunh:8711Sajh$@cluster0.1xc7n.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db(); //name the collection something (meetups in this case)\n\n  const meetupsCollection = db.collection('meetups');\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/jennyhwang/Desktop/next/code/14-preparing-paths-getstaticpaths/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","close","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","selectedMeetup","findOne"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAIA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACA,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADxB;AAEA,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFxB;AAGA,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH1B;AAIA,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ9B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAMD,OAAO,eAAeC,cAAf,GAAgC;AAErC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,iGAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAJqC,CAMvC;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEAJ,EAAAA,MAAM,CAACK,KAAP,GATuC,CAWvC;AACA;AACA;AACA;;AACA,QAAMC,OAAO,GAAG,MAAMH,iBAAiB,CAACI,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAAtB;AAGE,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AAAGC,MAAAA,MAAM,EAAE;AACvCC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAD6B;AAAX,KAAL,CAAlB;AAFF,GAAP;AAOD;AAKD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMlB,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,iGAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAL4C,CAO9C;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMW,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,QAAMM,cAAc,GAAG,MAAMlB,iBAAiB,CAACmB,OAAlB,CAA0B;AAACd,IAAAA,GAAG,EAAEO;AAAN,GAA1B,CAA7B;AAEAf,EAAAA,MAAM,CAACK,KAAP;AAIE,SAAO;AACLZ,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE2B;AADP;AADF,GAAP;AAKD;AAED,eAAe7B,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient } from 'mongodb';\n\n\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n    image={props.meetupData.image}\n    title={props.meetupData.title}\n    address={props.meetupData.address}\n    description={props.meetupData.description}\n  />\n  );\n}\n\n\n\n\n\nexport async function getStaticPaths() {\n\n  const client = await MongoClient.connect('mongodb+srv://jennyunh:8711Sajh$@cluster0.1xc7n.mongodb.net/meetups?retryWrites=true&w=majority')\n\n  const db = client.db();\n\n//name the collection something (meetups in this case)\nconst meetupsCollection = db.collection('meetups')\n\nclient.close();\n\n//find takes an object with a filter inside as first argument,\n//empty object means no filter (you want all objects)\n//second argument specify what info you want to extract\n//_id:1 means only include the id, no other field values\nconst meetups = await meetupsCollection.find({}, {_id:1}).toArray();\n\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({  params: {\n      meetupId: meetup._id.toString()\n    }}) ) \n    \n  };\n}\n\n\n\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n\n  const client = await MongoClient.connect('mongodb+srv://jennyunh:8711Sajh$@cluster0.1xc7n.mongodb.net/meetups?retryWrites=true&w=majority')\n\n  const db = client.db();\n\n//name the collection something (meetups in this case)\nconst meetupsCollection = db.collection('meetups')\n\nconst meetupId = context.params.meetupId;\n\nconsole.log(meetupId);\n\nconst selectedMeetup = await meetupsCollection.findOne({_id: meetupId})\n \nclient.close();\n\n\n\n  return {\n    props: {\n      meetupData: selectedMeetup\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}