{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jennyhwang/Desktop/next/code/14-preparing-paths-getstaticpaths/pages/[meetupId]/index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: \"First Meetup\",\n    address: \"Some Street 5, Some City\",\n    description: \"This is a first meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/jennyhwang/Desktop/next/code/14-preparing-paths-getstaticpaths/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","props","meetupData","image"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAKA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAC,0BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KATQH,a;;AA2ET,eAAeA,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient } from 'mongodb';\n\n\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title='First Meetup'\n      address='Some Street 5, Some City'\n      description='This is a first meetup'\n    />\n  );\n}\n\n\n\n\n\nexport async function getStaticPaths() {\n\n  const client = await MongoClient.connect('mongodb+srv://jennyunh:8711Sajh$@cluster0.1xc7n.mongodb.net/meetups?retryWrites=true&w=majority')\n\n  const db = client.db();\n\n//name the collection something (meetups in this case)\nconst meetupsCollection = db.collection('meetups')\n\nclient.close();\n\n//find takes an object with a filter inside as first argument,\n//empty object means no filter (you want all objects)\n//second argument specify what info you want to extract\n//_id:1 means only include the id, no other field values\nconst meetups = await meetupsCollection.find({}, {_id:1}).toArray();\n\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({  params: {\n      meetupId: meetup._id.toString()\n    }}) ) \n    \n  };\n}\n\n\n\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n\n  const client = await MongoClient.connect('mongodb+srv://jennyunh:8711Sajh$@cluster0.1xc7n.mongodb.net/meetups?retryWrites=true&w=majority')\n\n  const db = client.db();\n\n//name the collection something (meetups in this case)\nconst meetupsCollection = db.collection('meetups')\n\nconst meetupId = context.params.meetupId;\n\nconsole.log(meetupId);\n\nconst selectedMeetup = await meetupsCollection.findOne({_id: meetupId})\n\nclient.close();\n\n\n\n\n \n\n  return {\n    props: {\n      meetupData: selectedMeetup\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}